# -*- coding:utf-8 -*-
from zs_backend import SqlOperate
from zs_backend.utils.common import login_require
from flask import render_template, session, request, jsonify, g
from zs_backend.utils import time_util
from zs_backend.utils.channel_qry import *
import json
from zs_backend.utils.const import *

def get_coin_recharge_discounts(channel, recharge, pid):
    ## 查询当前是否有优惠活动
    Now = time_util.now_sec()
    sql = '''
        select id, participation_member, participation_level, activity_type, recharge_detail,
                request_times, max_add_recharge
        from admin_recharge_discounts
        where begin_time <= %d and end_time >= %d
        and status = %d
    ''' % (Now, Now, pass_audit)
    data = LogQry(channel).qry(sql)
    if not data:
        return 0, 0, recharge * 100

    ## 查询该玩家的所属层级
    sql = 'select vip, total_recharge_rmb from player where id = %d' % pid
    vip, is_recharge = LogQry(channel).qry(sql)[0]
    is_recharge = is_recharge > 0

    ## 计算玩家当前参与过的充值优惠情况
    got_recharge_discount = {}
    sql = '''
        select rechargeid, sum(add_recharge), count(1)
        from admin_recharge
        where pid = %d
        group by rechargeid
    ''' % pid
    for i, k, v in LogQry(channel).qry(sql):
        got_recharge_discount[int(i)] = {
            "total": int(k),
            "times": int(v),
        }

    # 遍历各个优惠活动 查找给予玩家最大利益的优惠
    can_get_discounts = {}
    for aid, participation_member, participation_level, activity_type, recharge_detail, \
        request_times, max_add_recharge in data:
        ## 先判断可参与玩家 以及 参与层级
        ## 如果只是针对新玩家 但是又已经充值了 则忽略
        if participation_member == PARTICIPATION_TYPE_NEW and is_recharge:
            continue
        if participation_member == PARTICIPATION_TYPE_OLD and (not is_recharge):
            continue
        ## 判断最大赠送金额
        if not max_add_recharge:
            max_add_recharge = 999999999999999999
        if got_recharge_discount.has_key(aid) and got_recharge_discount[aid]["total"] >= max_add_recharge:
            continue
        ## 判断最大可申请次数
        if got_recharge_discount.has_key(aid) and got_recharge_discount[aid]["times"] >= request_times:
            continue
        ## 玩家层级不在此部分
        if str(vip) not in participation_level.split(","):
            continue
        ## 判断活动可赠送的金额数 
        recharge_detail = eval(recharge_detail)
        recharge_detail.sort(reverse=True)
        ## 剩余可赠送金额 单位分
        if got_recharge_discount.has_key(aid):
            rest_add_recharge = max_add_recharge - got_recharge_discount[aid]["total"]
        else:
            rest_add_recharge = max_add_recharge
        ## 固定金额
        if activity_type == ACTIVITY_TYPE_FIX:
            for min_recharge, add_recharge in recharge_detail:
                if recharge >= min_recharge:
                    can_get_discounts[aid] = min(add_recharge, rest_add_recharge)
                    break
        ## 百分比
        elif activity_type == ACTIVITY_TYPE_PERCENT:
            for min_recharge, add_percent in recharge_detail:
                if recharge >= min_recharge:
                    can_get_discounts[aid] = min(int(recharge * add_percent / 10000), rest_add_recharge)
                    break

    print can_get_discounts
    ## 找不到可优惠的活动
    if not can_get_discounts:
        return 0, 0, recharge * 100

    ## 有可优惠的活动 则找到最大可赠送的
    final_add_recharge = 0
    final_recharge_id = 0
    for k, v in can_get_discounts.items():
        if v >= final_add_recharge:
            final_recharge_id = k
            final_add_recharge = v

    return final_recharge_id, final_add_recharge, (final_add_recharge + recharge) * 100
    